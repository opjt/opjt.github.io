[{"content":"","date":null,"permalink":"https://opjt.github.io/","section":"","summary":"","title":""},{"content":"","date":null,"permalink":"https://opjt.github.io/tags/go/","section":"tags","summary":"","title":"Go"},{"content":"Go로 개발할 때 환경변수를 어떻게 관리할 지 한번쯤은 고민을 해보셨을 겁니다\nNode.js 나 Python 진영에서 사용하는 방법처럼 .env 파일을 사용해서 읽어오거나\n표준 라이브러리인 os.Getenv 를 사용해서 환경변수를 다루시는 분들도 있으실 거에요\n저는 개인적으로,\nGo에서는 OS(Environment Variable)을 사용하는 것이 더 표준에 가깝다고 생각해요.\n.env 파일은 편의용으로는 괜찮지만, 운영 표준은 아니라고 봐요.\nOS 환경변수를 사용하는 이유 #Go는 운영체제와 아주 밀접하게 설계된 언어 같아요\n파일, 네트워크, 프로세스 같은 것들을 직접 다루는 표준 패키지가 준비되어 있고, 환경변수도 마찬가지로 os 패키지에서 바로 접근할 수 있습니다\nport := os.Getenv(\u0026#34;PORT\u0026#34;) if port == \u0026#34;\u0026#34; { port = \u0026#34;8080\u0026#34; } fmt.Println(\u0026#34;Server running on port:\u0026#34;, port) 별도의 설정 파일이나 외부 의존성 없이, 운영체제에서 바로 값을 받아오는 게 가장 단순하고 직관적인 방법이라고 생각해요\nOS 환경변수를 표준이라고 볼 수 있나 #운영 환경에서는 .env 파일을 직접 읽지 않아도 이미 환경변수를 관리할 수 있는 방법이 충분히 준비되어 있습니다.\n환경 설정 방식 systemd EnvironmentFile Docker \u0026ndash;env, \u0026ndash;env-file kubernetes env, envFrom 어플리케이션 코드레벨에서 .env 를 직접 읽지 않아도 운영체제나 컨테이너 레벨에서 이미 표준화된 방식으로 주입할 수 있어요.\n개발환경을 고려한 환경변수 다루기 #개발환경에서는 OS환경변수를 일일이 export 하기 번거스러워요\n이때는 godotenv 라이브러리를 사용하면 편하게 .env 파일을 읽어서 os.Getenv()로 접근할 수 있어요\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/joho/godotenv\u0026#34; ) func main() { if os.Getenv(\u0026#34;APP_STAGE\u0026#34;) == \u0026#34;dev\u0026#34; { _ = godotenv.Load(\u0026#34;.env.dev\u0026#34;) } port := os.Getenv(\u0026#34;PORT\u0026#34;) dbURL := os.Getenv(\u0026#34;DB_URL\u0026#34;) fmt.Println(\u0026#34;PORT:\u0026#34;, port) fmt.Println(\u0026#34;DB_URL:\u0026#34;, dbURL) } 모든 변수를 export 하는 것 보다 APP_STAGE=dev go run main.go로 실행하면 되니 훨씬 편해졌어요\n","date":"2025-10-25","permalink":"https://opjt.github.io/posts/2/","section":"posts","summary":"어떻게 환경변수를 관리해야 잘했다고 소문이날까","title":"Go 에서 환경변수 다루기"},{"content":"","date":null,"permalink":"https://opjt.github.io/posts/","section":"posts","summary":"","title":"posts"},{"content":"","date":null,"permalink":"https://opjt.github.io/tags/","section":"tags","summary":"","title":"tags"},{"content":"","date":null,"permalink":"https://opjt.github.io/tags/neovim/","section":"tags","summary":"","title":"Neovim"},{"content":"neovim이 뭔데 # 쉽게 생각하여 우리가 cli 환경에서 자주 사용하는 vim의 진화버전이라고 보면 된다\n그렇다면 사람들은 굳이굳이 IntelliJ나 vsCode가 있는데도 neovim을 IDE로 사용하려는 것인가?\n사실 neovim이나 emacs나 둘다 마이너하다고 생각해서 남들과는 다르게 보이고 싶은 마음이 절반이라고 봄(개인적 생각)\n그럼에도 내가 단기간 사용해보면서 생각한 몇가지 장점들이 있다\n내가 생각하는 진짜 장점 #1.. 생산성 GOAT\n키보드로 모든 작업을 수행할 수 있다보니 숙련된다면 매우 높은 생산성을 만들 수 있다\n(다른 툴도 단축키 맵핑하면 똑같은 거 아님?)\n2.. 이식성\n똑같은 vim 설정을 가져가고 싶다면 .vimrc 를 복붙해서 사용하듯\nneovim도 똑같다. 설정파일을 그대로 가져온다면 내 맥이서든 대상 서버에서든 새로 산 맥북에서든 똑같은 환경에서 작업할 수 있다\n그리고 터미널에서 돌아가다보니 다른 IDE에 비해 가볍기도 함\n단점에 대해서는 충분히 사용하고 나서 작성할 예정이다\nneovim 시작하기 #neovim을 시작하는 방법은 여러 방법이 있는데\n그중 하나인 kickstart를 사용하겠습니다\nkickstart와 비슷한 형태로는 lazyvim이 있는데 lazyvim은 당장 IDE로 사용할 수 있는 환경을 제공하는 반면 kickstart는 스타터킷의 개념입니다 brew install neovim git clone https://github.com/nvim-lua/kickstart.nvim.git ~/.config/nvim 설치 방법은 위 커맨드가 끝입니다(mac 한정)\n이후 터미널에서 nvim을 입력하면 사진과 같은 화면을 보실 수 있습니다\nkickstart 구조 #~/.config/nvim ├── doc │ ├── kickstart.txt │ └── tags ├── init.lua ├── lazy-lock.json ├── LICENSE.md ├── lua │ ├── custom │ │ └── plugins │ └── kickstart │ ├── health.lua │ └── plugins # 기본 제공 플러그인 └── README.md 처음 설치하게 되면 플러그인이 비활성화되어 있습니다\nnvim ~/.config/nvim/init.lua -- require 'kickstart 를 검색하시면 주석된 플러그인 항목이 있습니다\n-- require \u0026#39;kickstart.plugins.debug\u0026#39;, -- require \u0026#39;kickstart.plugins.indent_line\u0026#39;, -- require \u0026#39;kickstart.plugins.lint\u0026#39;, -- require \u0026#39;kickstart.plugins.autopairs\u0026#39;, -- require \u0026#39;kickstart.plugins.neo-tree\u0026#39;, -- require \u0026#39;kickstart.plugins.gitsigns\u0026#39;, -- adds gitsigns recommend keymaps 여기서 사용할 플러그인 앞에 있는 -- 를 제거해 주세요\n다시 nvim을 실행 후 :Lazy 를 입력하면 설치된 플러그인을 확인할 수 있습니다\n커스텀 플러그인 추가 #직접 플러그인을 추가할 때는 custom/plugins 디렉토리를 사용합니다\nnvim 화면내에 터미널을 띄우는 toggleterm을 예제로 설명하겠습니다\n-- ~/.config/nvim/lua/custom/plugins/toogleterm.lua return { { \u0026#39;akinsho/toggleterm.nvim\u0026#39;, version = \u0026#39;*\u0026#39;, config = function() require(\u0026#39;toggleterm\u0026#39;).setup { size = 20, open_mapping = [[\u0026lt;c-\\\u0026gt;]], direction = \u0026#39;horizontal\u0026#39;, } end, }, } 플러그인을 추가했으면 init.lua 에서 custom plugin을 임포트하는 부분을 활성화해 주세요\n-- { import = \u0026#39;custom.plugins\u0026#39; }, 해당 코드의 주석을 해제하면 cusotm/plugins 디렉토리에 있는 .lua 파일들이 임포트 됩니다 마찬가지로 저장후 재실행하여 주세요\n이제 Control+\\ 를 통해 터미널을 띄울 수 있습니다\n","date":"2025-09-22","permalink":"https://opjt.github.io/posts/1/","section":"posts","summary":"with kickstart","title":"neovim 찍먹"},{"content":"","date":null,"permalink":"https://opjt.github.io/tags/hugo/","section":"tags","summary":"","title":"Hugo"},{"content":"젠장 또 SSG 블로그야 #사실 이번이 첫 블로그는 아니다\n이전에도 Jekyll로 블로그를 만든 적이 있었지만, 글을 잘 쓰지 않게 되고 왠지 손이 잘 안 가더라.\n게다가 구글 SEO에 등록했는데도 글이 검색에 뜨지 않는 문제가 있어, 그 경험이 블로그에 대한 인상을 좋지 않게 남겼던 것 같다.\n그래서 이참에 새롭게 시작하자는 생각으로 hugo 를 통해 블로그를 다시 시작해보려 한다\nwhy hugo? #hugo는 go로 만들어졌는데 그 이유가 전부다\n최근 go에 관심을 갖고 go를 좋게 생각하기 때문이다\n테마는 https://canstand.github.io/compost/를 사용하였는데 개인적으로 뭔가 부족해 보이지만 심플해서 좋다\n부족한 부분은 조금씩 수정하면서 완성할 생각이다\ncompost의 전신이라고 판단되는 Congo로 테마를 변경하였다 블로그 목적 #회사를 다니면서 무언가를 기록하는 것이 매우 중요하고 값진 행위라는 것을 느낀다\n개인적으로 멋진 기술 글들을 보면서 나도 저렇게 글을 잘 쓰고 싶다는 생각도 든다\n뭐든 꾸준히 하는 것이 어렵다지만,,\n정말 어렵습니다 이번에는 잘 쓰지는 못해도 꾸준히를 목적으로 하려고 해요\n며칠 간 seo 부분을 해결하지 못하면 velog로 넘어갈 생각도 있다\n어찌보면 이 글은 처음이자 마지막이 될 수도 있는 글이다 ㅋㅋ\nhugo로 blog 만들기 # hugo에서 사용할 수 있는 테마는 정말 많다 https://themes.gohugo.io/\n이 수많은 테마 중 심플하면서 블로그로서의 기능을 할 수 있을 것 같은 몇 가지 테마 입니다.\nhttps://themes.gohugo.io/themes/loveit/ https://themes.gohugo.io/themes/hugo-papermod/ https://themes.gohugo.io/themes/congo/ 저는 이 목록에 없는 compost 테마를 사용하여 블로그를 만드려고 하였으나\n이의 전신인 congo 를 최종적으로 선택하게 되었습니다.\n본 글에서는 hugo의 설치방법은 따로 가이드 하지 않겠습니다.\nhugo new site #Congo install guide 를 참고하세요\nhugo로 블로그를 만드는 것은 정말 5분도 걸리지 않습니다.\nhugo new site newblog cd newblog hugo mod init newblog 원래 mod init 뒤에 오는 부분은 go 모듈 경로로 보통 자신의 레포지토리 주소를 씁니다 사실 이 부분만 가능하다면 이미 절반은 온 셈입니다\n이후 config/_default 디렉토리를 만들어 주세요.\nconfig 설정\ndownload a copy 로 파일을 받아주세요 받은 파일을 config/_default/ 경로에 넣어주세요 루트 레벨(go.mod가 있는 레벨)에 있는 hugo.toml 은 삭제하여 주세요. newblog ├── assets ├── config │ └── _default ├── hugo.toml ├── languages.en.toml ├── markup.toml ├── menus.en.toml ├── module.toml └── params.toml 최종적으로 위와 같은 형태가 되어야 합니다\nhugo server 명령어 실행 후 localhost:1313 를 접속하면 짜자잔~ 블로그를 확인하실 수 있습니다\ncongo theme setting #공식 설정 가이드 를 참고하여 주세요\n블로그처럼 사용하기 위해 최소한의 설정을 설명합니다\n. ├── config │ └── _default ├── content │ ├── _index.md # localhost:1313/ │ └── posts │ ├── _index.md # localhost:1313/posts/ │ └── tags │ ├── _index.md # localhost:1313/tags/ --- title: \u0026#34;\u0026#34; --- 위와 같은 구조로 _index.md 파일을 3개 만들어 주세요\ntitle에 들어가는 값은 각 페이지에 접근했을 때 표기될 타이틀명입니다\nconfig/_default에 있는 다양하고 디테일한 설정들은 Congo configuration 공식문서를 참고하여 주세요\nhugo new content #hugo new content posts/new_post.md 명령어로 블로그 글을 생성해 보세요\n","date":"2025-09-12","permalink":"https://opjt.github.io/posts/init_blog/","section":"posts","summary":"hugo로 정적 블로그를 만들어봐요","title":"블로그 요이땅"},{"content":"","date":null,"permalink":"https://opjt.github.io/categories/","section":"Categories","summary":"","title":"Categories"}]